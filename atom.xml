<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>啊多子</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-10-28T12:33:03.773Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>wangly</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>vue虚拟dom</title>
    <link href="http://yoursite.com/2017/10/23/vue-virtual-dom/"/>
    <id>http://yoursite.com/2017/10/23/vue-virtual-dom/</id>
    <published>2017-10-23T10:28:21.000Z</published>
    <updated>2017-10-28T12:33:03.773Z</updated>
    
    <content type="html"><![CDATA[<p>本文将结合<a href="https://github.com/vuejs/vue" target="_blank" rel="external">vue2.0</a>源码向各位介绍下vue virtual dom。</p><h1 id="什么是virtual-dom"><a href="#什么是virtual-dom" class="headerlink" title="什么是virtual dom"></a>什么是virtual dom</h1><p>vue2.0和react都引入了virtual dom的概念，virtual dom就是一种在js中模拟dom对象树来优化dom操作的技术或思想。</p><a id="more"></a><h1 id="为什么要引入vdom"><a href="#为什么要引入vdom" class="headerlink" title="为什么要引入vdom"></a>为什么要引入vdom</h1><p>1、dom元素太复杂，如果每次都重新生成dom元素，浪费性能。<br>做个实验，打印出一个空元素的属性：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var testDiv = document.createElement(&apos;div&apos;);</div><div class="line">for(var attr in testDiv )&#123;</div><div class="line">  console.log(attr)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>打印结果可以看出，dom元素的属性太多了，而vdom定义了真实dom的一些关键信息，这样模拟出来的虚拟dom对象简单的很多（vnode）。</p><p>2、创建dom，删除dom，插入dom等一系列dom操作很耗性能。<br>而vdom很好地对dom做了一层映射关系，进而将dom的一系列操作映射到了操作vdom。<br>vdom完全是由js实现的，和浏览器没有任何关系，得益于js的执行速度，相比于操作真实dom，提高了效率和性能。eg：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">//伪代码</div><div class="line">var mydivVirtual = &#123; </div><div class="line">  tagName: &apos;DIV&apos;,</div><div class="line">  className: &apos;a&apos;</div><div class="line">&#125;;</div><div class="line">var newmydivVirtual = &#123;</div><div class="line">   tagName: &apos;DIV&apos;,</div><div class="line">   className: &apos;b&apos;</div><div class="line">&#125;</div><div class="line">if(mydivVirtual.tagName !== newmydivVirtual.tagName || mydivVirtual.className  !== newmydivVirtual.className) &#123;</div><div class="line">   change(mydiv)</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 会执行相应的修改 mydiv.className = &apos;b&apos;;</div><div class="line">//最后  &lt;div class=&apos;b&apos;&gt;&lt;/div&gt;</div></pre></td></tr></table></figure></p><h1 id="VNode"><a href="#VNode" class="headerlink" title="VNode"></a>VNode</h1><p>接下来，我们来了解下VNode：<br>页面上每个节点都有对应的vnode，vnode的几个比较重要的属性：</p><ul><li>tag：即这个vnode的标签属性</li><li>data：包含了最后渲染成真实dom节点后，节点上的class,attribute,style以及绑定的事件</li><li>children：是vnode的子节点</li><li>text：是文本属性（只有文本节点和注释节点该属性才有值）</li><li>elm：为这个vnode对应的真实dom节点</li><li>key：是vnode的标记，在diff过程中可以提高diff的效率，后文有讲解<br>…..</li></ul><h1 id="vdom的实现"><a href="#vdom的实现" class="headerlink" title="vdom的实现"></a>vdom的实现</h1><p>先来看下整体流程：<br><img src="http://res.cloudinary.com/dbdwyv3dv/image/upload/v1508762939/flow-chart_kb8m9t.png" alt="vdom的整体流程图"><br>首先，组件初始化（init）时挂载了组件（mountComponent）:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">//vue组件初始化</div><div class="line">function init () &#123;</div><div class="line">  ...</div><div class="line">  //组件挂载</div><div class="line">  mountComponent();</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>组件挂载（mountComponent）时，定义了updateComponent函数，实际执行update，update的第一个参数是由render生成的一个vnode节点，同时初始化了watcher，记录了数据的依赖，当data changed时，会进行update：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">//组件挂载</div><div class="line">function mountComponent () &#123;</div><div class="line">  ...</div><div class="line">  let updateComponent = () =&gt; &#123;</div><div class="line">    //render()结果是一个新的vnode</div><div class="line">    update(render(), ...);</div><div class="line">  &#125;</div><div class="line">  //把updateComponent方法传进watcher，watcher记录了数据依赖，data changed时，执行updateComponent</div><div class="line">  new Watcher(..., updateComponent, ...);</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>其中，watcher的实现，对数据进行监听：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">function Watcher () &#123;</div><div class="line">  ...</div><div class="line">  收集数据依赖</div><div class="line">  ...</div><div class="line">  data changed --&gt; updateComponent</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>render的实现，返回vnode节点：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">function render () &#123;</div><div class="line">  ...</div><div class="line">  let vnode = createElement();</div><div class="line">  ...</div><div class="line">  return vnode;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>createElement的实现，创建vnode节点 ：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">function createElement() &#123;</div><div class="line">  ...</div><div class="line">  let vnode = new Vnode();</div><div class="line">  ...</div><div class="line">  return vnode;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>update包括diff（对新旧vnode进行比较）和patch（根据diff结果在oldVNode上面打的补丁更新真实dom）的过程（代码里就是指patch， patchVnode， updateChildren几个方法的过程），算法基于snabbdom算法，复杂度为O(n)：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">//更新</div><div class="line">function update (vnode, ...) &#123;</div><div class="line">  ...</div><div class="line">  if(!prevVnode) &#123;//如果prevVnode不存在，就用新的vnode来创建真实的dom</div><div class="line">    ...</div><div class="line">    patch(..., vnode, ...);</div><div class="line">    ...</div><div class="line">  &#125; else &#123;//prevVNode存在，就对prevVnode和vnode进行diff，并将需要更新的dom以patch的形式打到prevVnode上，并完成真实的dom的更新工作</div><div class="line">    ...</div><div class="line">    patch(prevVnode, vnode, ...);</div><div class="line">    ...</div><div class="line">  &#125;</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>其中，patch是virtual dom的核心方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">//virtual dom的核心方法，主要完成了prevVnode和vnode的diff，并根据需要打patch，最后完成真实dom的更新工作。</div><div class="line">function patch (oldVnode, vnode) &#123;</div><div class="line">  ...</div><div class="line">  if(isUndef(oldVnode)) &#123;//oldVnode不存在时，在父节点底下直接创建新的子节点</div><div class="line">    createElm(vnode, ..., parentElm);</div><div class="line">  &#125; else &#123;</div><div class="line">    if(sameVnode(oldVnode, vnode)) &#123;//两个节点基本属性一致时，对oldVnode和vnode进行diff，并对oldVnode打patch</div><div class="line">      patchVnode(oldVnode, vnode, ...);</div><div class="line">    &#125; else &#123;//否则跳过diff，直接根据vnode创建一个新的dom，同时删除老的dom</div><div class="line">      createElm(vnode, ..., parentElm);</div><div class="line">      removeElm(oldVnode, ..., parentElm);</div><div class="line">      ...</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>sameVNode用来比较两个节点的基本属性是否一致，一致时表示两个节点值得对比，才进行diff，否则无需对比，直接生成新的dom：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">//判断两个节点的基本属性是否一致，是否值得比较</div><div class="line">function sameVnode(a, b) &#123;</div><div class="line">  return (</div><div class="line">    a.key === b.key &amp;&amp;</div><div class="line">    a.tag === b.tag &amp;&amp;</div><div class="line">    a.isComment === b.isComment &amp;&amp;</div><div class="line">    isDef(a.data) === isDef(b.data) &amp;&amp;</div><div class="line">    sameInputType(a, b)</div><div class="line">  );</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>接下来，patchVnode又分了好几种情况：<br>1、首先进行文本节点的判断，若oldVnode.text !== vnode.text，那么就会直接进行文本节点的替换；<br>2、在vnode没有文本节点的情况下，进入子节点的diff；<br>3、当oldCh和ch都存在且不相同的情况下，调用updateChildren对子节点进行diff；<br>4、 若oldCh不存在，ch存在，首先清空oldVnode的文本节点，同时调用addVnodes方法将ch添加到elm真实dom节点当中；<br>5、若oldCh存在，ch不存在，则删除elm真实节点下的oldCh子节点；<br>6、若oldVnode有文本节点，而vnode没有，那么就清空这个文本节点。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">//</div><div class="line">function patchVnode(oldVnode, vnode) &#123;</div><div class="line">  const elm = vnode.elm = oldVnode.elm,//在patch之前，vnode的属性是null的，因为在patch之前还没真实的dom，此处vnode的el属性引用的是oldVnode的el属性</div><div class="line">    oldCh = oldVnode.children,</div><div class="line">    ch = vnode.children;</div><div class="line">  if(ifUndef(vnode.text)) &#123;//vnode没有文本节点</div><div class="line">    if(isDef(oldCh) &amp;&amp; isDef(ch)) &#123;//oldVnode和vnode都有children</div><div class="line">      //对子节点进行diff</div><div class="line">      updateChildren(elm, oldCh, ch, ...);</div><div class="line">    &#125; else if(isDef(ch)) &#123;//只有vnode存在children</div><div class="line">      if(ifDef(oldVnode.text)) &#123;//若oldVnode有text，清空原来的文本节点</div><div class="line">        nodeOps.setTextContent(elm, &apos;&apos;);</div><div class="line">      &#125;</div><div class="line">      //同时将ch添加到elm真实的dom节点中</div><div class="line">      addVnodes(elm, ch, ...);</div><div class="line">    &#125; else if(isDef(oldCh)) &#123;//只有oldVnode存在children</div><div class="line">      //删除elm下的oldCh节点</div><div class="line">      removeVnode(elm, oldCh, ...);</div><div class="line">    &#125; else if(isDef(oldVnode.text)) &#123;//只有oldVnode有文本节点，那就清空这个文本节点</div><div class="line">      nodeOps.setTextContent(elm, &apos;&apos;);</div><div class="line">    &#125;</div><div class="line">  &#125; else if(ifDef(oldVnode.text !== vnode.text)) &#123;//vnode有文本节点，直接将elm的内容设为该文本</div><div class="line">    nodeOps.setTextContent(elm, vnode.text);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>updateChildren是diff的核心：<br>首先，给oldVnode和vnode的firstChild和lastChild分别设置oldStartVnode,oldEndVnode,newStartVnode,newEndVnode,接着开始patch：<br>1）如果oldStartVnode和newStartVnode基本属性相同，调用patchVnode进行patch，然后将oldStartVnode和newStartVnode都设置为下一子节点，重复上述流程：<br><img src="http://res.cloudinary.com/dbdwyv3dv/image/upload/v1508762938/sameVnode_oldStartVnode_newStartVnode_vrpayg.png" alt="sameVnode(oldStartVnode, newStartVnode)"><br>2）如果oldEndVnode和newEndVnode基本属性相同，调用patchVnode进行patch，然后将oldEndVnode和newEndVnode都设为上一子节点，重复上述流程：<br><img src="http://res.cloudinary.com/dbdwyv3dv/image/upload/v1508762940/sameVnode_oldEndVnode_newEndVnode_nirxo0.png" alt="sameVnode(oldEndVnode, newEndVnode)"><br>3）如果oldStartVnode和newEndVnode基本属性相同，调用patchVnode进行patch，把oldStartVnode.elm移至oldEndVnode.elm之后，然后把oldStartVnode设为下一子节点，把newEndVnode设为上一子节点，重复上述流程：<br><img src="http://res.cloudinary.com/dbdwyv3dv/image/upload/v1508762944/sameVnode_oldStartVnode_newEndVnode_ennsvf.png" alt="sameVnode(oldStartVnode, newEndVnode)"><br>4）如果oldEndVnode和newStartVnode基本属性相同，调用patchVnode进行patch，把oldEndVnode.elm移至oldStartVnode.elm之后，然后把oldEndVnode 设为上一子节点，把newStartVnode设为下一子节点，重复上述流程：<br><img src="http://res.cloudinary.com/dbdwyv3dv/image/upload/v1508762940/sameVnode_oldEndVnode_newStartVnode_m43yxw.png" alt="sameVnode(oldEndVnode, newStartVnode)"><br>5）如果上述都不匹配，则尝试在oldChildren中查找与newStartVnode的key相同的子节点：<br>&ensp;&ensp;如果找不到相同key子节点，说明newStartVnode是一个新节点，就在oldStartVnode.elm前创建一个新节点，并把newStartVnode设为下一个节点，重复上述流程；<br>&ensp;&ensp;如果找得到相同key子节点，就比较这两个节点基本属性是否相同：<br>&ensp;&ensp;&ensp;&ensp;如果相同，就调用patchVnode进行patch，把找到的节点移到oldStartVnode之前，并把newStartVnode设为下一个节点，重复上述流程：<br>&ensp;&ensp;&ensp;&ensp;<img src="http://res.cloudinary.com/dbdwyv3dv/image/upload/v1508762940/key%E5%8C%B9%E9%85%8D%E4%B8%94sameVnode_uqpdyf.png" alt="key匹配且sameVnode"><br>&ensp;&ensp;&ensp;&ensp;如果不相同，则说明newStartVnode是一个新节点，就在oldStartVnode.elm前创建一个新节点，并把newStartVnode设为下一个节点，重复上述流程；</p><p>如果oldStartVnode和oldEndVnode重合了，或newStartVnode和newEndVnode重合了，表示diff结束了，如果oldChildren还有剩余节点，说明这些旧的节点已经不需要了，删除这些旧节点，如果newChildren还有剩余节点，说明这些节点是多出来的，新增这些子节点。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>引入虚拟dom实际上有优点也有缺点：</p><h2 id="尺寸"><a href="#尺寸" class="headerlink" title="尺寸"></a>尺寸</h2><p>更多的功能意味着更多的代码。幸运的是vue.js 2.0仍是相当小的（20+k）；</p><h2 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h2><p>虚拟dom需要在内存中维护一份dom的副本。需要在更新速度和使用内存空间取得平衡。</p><h2 id="不是适合所有情况"><a href="#不是适合所有情况" class="headerlink" title="不是适合所有情况"></a>不是适合所有情况</h2><p>如果需要大量修改dom，虚拟dom是合适的，但是如果是单一的，但又需要频繁更新的话，虚拟dom将会花费更多的时间处理计算的工作。所以，如果你有一个dom相对较少的界面，用虚拟dom，可能会更慢。但对于绝大多数情况，应该是合适的。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文将结合&lt;a href=&quot;https://github.com/vuejs/vue&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;vue2.0&lt;/a&gt;源码向各位介绍下vue virtual dom。&lt;/p&gt;
&lt;h1 id=&quot;什么是virtual-dom&quot;&gt;&lt;a href=&quot;#什么是virtual-dom&quot; class=&quot;headerlink&quot; title=&quot;什么是virtual dom&quot;&gt;&lt;/a&gt;什么是virtual dom&lt;/h1&gt;&lt;p&gt;vue2.0和react都引入了virtual dom的概念，virtual dom就是一种在js中模拟dom对象树来优化dom操作的技术或思想。&lt;/p&gt;
    
    </summary>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
      <category term="virtual dom" scheme="http://yoursite.com/tags/virtual-dom/"/>
    
  </entry>
  
</feed>
